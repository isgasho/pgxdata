package data

// This file is automatically generated by pgxdata.

import (
	"context"
	"strings"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	errors "golang.org/x/xerrors"
)

type Widget struct {
	ID     pgtype.Int8
	Name   pgtype.Varchar
	Weight pgtype.Int2
}

const countWidgetSQL = `select count(*) from "widget"`

func CountWidget(ctx context.Context, db Queryer) (int64, error) {
	var n int64
	err := prepareQueryRow(ctx, db, "pgxdataCountWidget", countWidgetSQL).Scan(&n)
	return n, err
}

const SelectAllWidgetSQL = `select
  "id",
  "name",
  "weight"
from "widget"`

func SelectAllWidget(ctx context.Context, db Queryer) ([]Widget, error) {
	var rows []Widget

	dbRows, err := prepareQuery(ctx, db, "pgxdataSelectAllWidget", SelectAllWidgetSQL)
	if err != nil {
		return nil, err
	}

	for dbRows.Next() {
		var row Widget
		dbRows.Scan(
			&row.ID,
			&row.Name,
			&row.Weight,
		)
		rows = append(rows, row)
	}

	if dbRows.Err() != nil {
		return nil, dbRows.Err()
	}

	return rows, nil
}

const selectWidgetByPKSQL = `select
  "id",
  "name",
  "weight"
from "widget"
where "id"=$1`

func SelectWidgetByPK(
	ctx context.Context,
	db Queryer,
	id int64,
) (*Widget, error) {
	var row Widget
	err := prepareQueryRow(ctx, db, "pgxdataSelectWidgetByPK", selectWidgetByPKSQL, id).Scan(
		&row.ID,
		&row.Name,
		&row.Weight,
	)
	if errors.Is(err, pgx.ErrNoRows) {
		return nil, ErrNotFound
	} else if err != nil {
		return nil, err
	}

	return &row, nil
}

func InsertWidget(ctx context.Context, db Queryer, row *Widget) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 3))

	var columns, values []string

	if row.ID.Status != pgtype.Undefined {
		columns = append(columns, `id`)
		values = append(values, args.Append(&row.ID))
	}
	if row.Name.Status != pgtype.Undefined {
		columns = append(columns, `name`)
		values = append(values, args.Append(&row.Name))
	}
	if row.Weight.Status != pgtype.Undefined {
		columns = append(columns, `weight`)
		values = append(values, args.Append(&row.Weight))
	}

	sql := `insert into "widget"(` + strings.Join(columns, ", ") + `)
values(` + strings.Join(values, ",") + `)
returning "id"
  `

	psName := preparedName("pgxdataInsertWidget", sql)

	return prepareQueryRow(ctx, db, psName, sql, args...).Scan(&row.ID)
}

func UpdateWidget(ctx context.Context, db Queryer,
	id int64,
	row *Widget,
) error {
	sets := make([]string, 0, 3)
	args := pgx.QueryArgs(make([]interface{}, 0, 3))

	if row.ID.Status != pgtype.Undefined {
		sets = append(sets, `id`+"="+args.Append(&row.ID))
	}
	if row.Name.Status != pgtype.Undefined {
		sets = append(sets, `name`+"="+args.Append(&row.Name))
	}
	if row.Weight.Status != pgtype.Undefined {
		sets = append(sets, `weight`+"="+args.Append(&row.Weight))
	}

	if len(sets) == 0 {
		return nil
	}

	sql := `update "widget" set ` + strings.Join(sets, ", ") + ` where ` + `"id"=` + args.Append(id)

	psName := preparedName("pgxdataUpdateWidget", sql)

	commandTag, err := prepareExec(ctx, db, psName, sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}

func DeleteWidget(ctx context.Context, db Queryer,
	id int64,
) error {
	args := pgx.QueryArgs(make([]interface{}, 0, 1))

	sql := `delete from "widget" where ` + `"id"=` + args.Append(id)

	commandTag, err := prepareExec(ctx, db, "pgxdataDeleteWidget", sql, args...)
	if err != nil {
		return err
	}
	if commandTag.RowsAffected() != 1 {
		return ErrNotFound
	}
	return nil
}
