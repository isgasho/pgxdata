func Update{{.StructName}}(ctx context.Context, db Queryer{{range .PrimaryKeyColumns}},
  {{.VarName}} {{.GoType}}{{end}},
  row *{{.StructName}},
) error {
  sets := make([]string, 0, {{len .Columns}})
  args := pgx.QueryArgs(make([]interface{}, 0, {{len .Columns}}))

{{range .Columns}}  if row.{{.FieldName}}.Status != pgtype.Undefined {
    sets = append(sets, `{{.ColumnName}}`+"="+args.Append(&row.{{.FieldName}}))
  }
{{end}}

  if len(sets) == 0 {
    return nil
  }

  sql := `update "{{.TableName}}" set ` + strings.Join(sets, ", ") + ` where ` {{ range $i, $column := .PrimaryKeyColumns}} + `{{if $i}} and {{end}}"{{$column.ColumnName}}"=` + args.Append({{$column.VarName}}){{end}}

  psName := preparedName("pgxdataUpdate{{.StructName}}", sql)

  commandTag, err := prepareExec(ctx, db, psName, sql, args...)
  if err != nil {
    return err
  }
  if commandTag.RowsAffected() != 1 {
    return ErrNotFound
  }
  return nil
}
